// RobotBuilder Version: 1.5
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc3925.Rafiki.subsystems;

import org.usfirst.frc3925.Rafiki.RobotMap;
import org.usfirst.frc3925.Rafiki.commands.ElevatorRun;
import org.usfirst.frc3925.Rafiki.helper.Constants;

import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDController;
import edu.wpi.first.wpilibj.PIDOutput;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.command.Subsystem;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;


/**
 *
 */
public class Elevator extends Subsystem {
	
	public static enum State {
		IDLE, ZERO, SETHEIGHT, RESET;
	}
	
	protected static final double
	MAX_HEIGHT = Constants.ELEVATOR_MAX_HEIGHT,
	TOLERANCE = Constants.ELEVATOR_TOLERANCE;

	protected double currentPos;
	protected State state = State.RESET;
	protected boolean zeroed = false;
	protected double setHeight = 0;
	
	PIDOutputRaw pIDOutputHelper = new PIDOutputRaw();
	protected double pIDOutputRaw = 0;
	
	/**
	 * Embedded class that allows PID outputs to be passed to both the motors
	 */
	protected class PIDOutputRaw implements PIDOutput {
		@Override
		public void pidWrite(double output) {
			pIDOutputRaw = output;
		}
	}

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	Encoder encoderElevator = RobotMap.elevatorEncoderElevator;
	SpeedController motorElevatorA = RobotMap.elevatorMotorElevatorA;
	PIDController elevatorPID = RobotMap.elevatorElevatorPID;
	SpeedController motorElevatorB = RobotMap.elevatorMotorElevatorB;
	DigitalInput elevatorSwitch = RobotMap.elevatorElevatorSwitch;
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	
	
	public void run() {
		currentPos = encoderElevator.getDistance();
		switch (state) {
		case IDLE:
			elevatorPID.setSetpoint(currentPos);
			break;
			
		case ZERO:
			elevatorPID.setSetpoint(0);
			if (Math.abs(currentPos) < TOLERANCE) {
				state = State.IDLE;
			}
			break;
			
		case SETHEIGHT:
			elevatorPID.setSetpoint(setHeight);
			if (Math.abs(currentPos-setHeight) < TOLERANCE) {
				state = State.IDLE;
				setHeight = 0;
			}
			break;
			
		case RESET:
			resetElevator();
			if (zeroed) { state = State.IDLE; }
			break;

		default:
			break;
		}
		setElevatorSpeed(pIDOutputRaw);
	}
	
	
	
	protected void resetElevator() {
		while (!zeroed) {
			setElevatorSpeed(-.2);
			if (!elevatorSwitch.get()) {
				setElevatorSpeed(0);
				zeroed = true;
			}
		}
	}

	protected void setElevatorSpeed(double speed) {
		if (currentPos <= 0 && speed < 0) {
			speed = 0;
		}
		if (currentPos >= MAX_HEIGHT && speed > 0) {
			speed = 0;
		}
		motorElevatorA.set(-speed);
		motorElevatorB.set(-speed);
	}
	
	protected void setSetPoint(double setPoint) {
		elevatorPID.setSetpoint(setPoint);
	}

	public void setState(State state) {
		this.state = state;
	}
	
	public void setStateHeight(double height) {
		setHeight = height;
		state = State.SETHEIGHT;
	}
	
	public void logData() {
		SmartDashboard.putString("ElevatorState", state.toString());
		
		SmartDashboard.putNumber("CurrentPosition", currentPos);
		SmartDashboard.putNumber("RawPIDOutputElevator", pIDOutputRaw);
		
		SmartDashboard.getBoolean("Zeroed", zeroed);
	}

	public PIDOutput getpIDOutputRaw() {
		return pIDOutputHelper;
	}

	public void initDefaultCommand() {
		// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		setDefaultCommand(new ElevatorRun());
		// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
		elevatorPID.enable();
	}
}

